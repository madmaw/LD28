var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (_value) {
                var AbstractValue = (function () {
                    function AbstractValue(evalReturnsNumber, numberOfParams, stringRepresentation) {
                        this.evalReturnsNumber = evalReturnsNumber;
                        this.numberOfParams = numberOfParams;
                        this.stringRepresentation = stringRepresentation;
                    }
                    AbstractValue.prototype.eval = function (params) {
                        return null;
                    };
                    AbstractValue.prototype.terminate = function (terminationTiles, boardState, value) {
                        var terminationTile = terminationTiles[0];
                        var createdTile = new board.Tile(new _value.ValueNumeric(value));
                        return [new ct.core.board.action.ActionCreateTile(createdTile, terminationTile.position.x, terminationTile.position.y)];
                    };
                    AbstractValue.prototype.toString = function () {
                        return this.stringRepresentation;
                    };
                    return AbstractValue;
                })();
                _value.AbstractValue = AbstractValue;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    window.onload = function () {
        Handlebars.registerHelper("math", function (lvalue, operator, rvalue, options) {
            if (arguments.length < 4) {
                options = rvalue;
                rvalue = operator;
                operator = "+";
            }
            lvalue = parseFloat(lvalue);
            rvalue = parseFloat(rvalue);
            console.log(options);
            return {
                "+": lvalue + rvalue,
                "-": lvalue - rvalue,
                "*": lvalue * rvalue,
                "/": lvalue / rvalue,
                "%": lvalue % rvalue
            }[operator];
        });
        var dropTileSoundEffect = new ct.core.SoundEffect(["click-1", "click-2", "click-3", "click-4"]);
        var claimSoundEffect = new ct.core.SoundEffect(["whoosh-1", "whoosh-2", "whoosh-3"]);
        var extolSoundEffects = [
            new ct.core.SoundEffect([]),
            new ct.core.SoundEffect([]),
            new ct.core.SoundEffect(["extol-1", "", ""]),
            new ct.core.SoundEffect(["extol-2", "", ""]),
            new ct.core.SoundEffect(["extol-3", "", ""]),
            new ct.core.SoundEffect(["extol-3", ""]),
            new ct.core.SoundEffect(["extol-4", "", ""]),
            new ct.core.SoundEffect(["extol-4", ""]),
            new ct.core.SoundEffect(["extol-5", "", ""]),
            new ct.core.SoundEffect(["extol-5", ""]),
            new ct.core.SoundEffect(["extol-6", "", ""]),
            new ct.core.SoundEffect(["extol-5", ""])
        ];
        var invalidSoundEffect = new ct.core.SoundEffect(["invalid-1", "invalid-2"]);
        var columns = 6;
        var tileWidth = Math.floor((window.innerWidth) / columns);
        var tileHeight = Math.floor((window.innerHeight) / Math.floor(window.innerHeight / tileWidth));
        var rows = Math.floor((window.innerHeight) / tileHeight);
        if (rows < 5) {
            rows = 5;
            tileHeight = Math.floor(window.innerHeight / rows);
            columns = Math.floor(window.innerWidth / tileHeight);
            tileWidth = Math.floor(window.innerWidth / columns);
        }
        var headerHeight = tileHeight;
        rows--;
        var freePlayTileSource = new ct.core.board.FairTileSource(0.3, [new ct.core.board.value.ValueNumeric(1)], [
            [new ct.core.board.value.ValueFunctionAddition()]
        ], 0);
        var youOnlyGetOneTileSource = new ct.core.board.FairTileSource(0.3, [new ct.core.board.value.ValueNumeric(1)], [
            [new ct.core.board.value.ValueFunctionAddition()]
        ], 0);
        var scantRewardsTileSource = new ct.core.board.FairTileSource(0.3, [new ct.core.board.value.ValueNumeric(0)], [
            [new ct.core.board.value.ValueFunctionIncrement(), new ct.core.board.value.ValueFunctionDecrement()],
            [new ct.core.board.value.ValueFunctionAddition(), new ct.core.board.value.ValueFunctionSubtraction()],
            [new ct.core.board.value.ValueFunctionMultiplication()],
        ], 1);
        var accumulaterTileSource = new ct.core.board.FairTileSource(0.25, [new ct.core.board.value.ValueNumeric(0), new ct.core.board.value.ValueNumeric(1)], [
            [new ct.core.board.value.ValueFunctionAddition(), new ct.core.board.value.ValueFunctionSubtraction()],
            [new ct.core.board.value.ValueFunctionIncrement(), new ct.core.board.value.ValueFunctionDecrement()],
            [new ct.core.board.value.ValueFunctionMultiplication(), new ct.core.board.value.ValueFunctionAccumulate()],
        ], 2, [new ct.core.board.value.ValueFunctionAccumulate()]);
        var timeTileSource = new ct.core.board.FairTileSource(0.25, [new ct.core.board.value.ValueNumeric(0), new ct.core.board.value.ValueNumeric(1)], [
            [new ct.core.board.value.ValueFunctionAddition(), new ct.core.board.value.ValueFunctionSubtraction()],
            [new ct.core.board.value.ValueFunctionIncrement(), new ct.core.board.value.ValueFunctionDecrement()],
            [new ct.core.board.value.ValueFunctionMultiplication(), new ct.core.board.value.ValueFunctionAddTime()],
        ], 2, [new ct.core.board.value.ValueFunctionAddTime()]);
        var zeroTileSource = new ct.core.board.FairTileSource(0.4, [new ct.core.board.value.ValueNumeric(-1), new ct.core.board.value.ValueNumeric(1)], [
            [new ct.core.board.value.ValueFunctionAddition(), new ct.core.board.value.ValueFunctionSubtraction()],
            [new ct.core.board.value.ValueFunctionIncrement(), new ct.core.board.value.ValueFunctionDecrement()],
        ], 2, [new ct.core.board.value.ValueFunctionMultiplication()]);
        var boardValueScorer = new ct.core.board.PointsSourceBoardValue();
        var maxBoardValueScorer = new ct.core.board.PointsSourceMaxBoardValue();
        var accumulatedValueScorer = new ct.core.board.PointsSourceAccumulated();
        var timeScorer = new ct.core.board.PointSourceTime();
        var zeroScorer = new ct.core.board.PointSourceZero();
        var levels = [];
        levels.push(new ct.core.home.Level("f2p", "You Only Get One(s)", "Back button exits", false, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = freePlayTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, freePlayTileSource, boardValueScorer);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("scant", "Scant Rewards", "", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = scantRewardsTileSource.create(columns * rows, 10);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, scantRewardsTileSource, boardValueScorer);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("acc", "Accumulater", "*(acc)umulate score", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = accumulaterTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, accumulaterTileSource, accumulatedValueScorer);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("timer", "Count Down", "first move starts timer", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = scantRewardsTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = board.tilesAcross; x > 0;) {
                x--;
                for (var y = board.tilesDown; y > 0;) {
                    y--;
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, scantRewardsTileSource, boardValueScorer, 60 * 1000 * 2);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("tacc", "Timed Accumulater", "", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = accumulaterTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, accumulaterTileSource, accumulatedValueScorer, 60 * 1000 * 2);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("alive", "Stayin' Alive", "time is score", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = timeTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, timeTileSource, timeScorer, 60 * 1000 * 2);
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        levels.push(new ct.core.home.Level("zero", "Zero out", "make zero value", true, function (level) {
            var index = 0;
            var board = new ct.core.board.Board(columns, rows, tileWidth, tileHeight);
            var tiles = zeroTileSource.create(columns * rows, 1);
            var tileId = 0;
            var actions = [];
            for (var x = 0; x < board.tilesAcross; x++) {
                for (var y = 0; y < board.tilesDown; y++) {
                    var tile = tiles[index];
                    index++;
                    tile.board = board;
                    var tileDropAction = new ct.core.board.action.ActionDropTile(tile, x, y - board.tilesDown, y);
                    actions.push(tileDropAction);
                }
            }
            actions.push(new ct.core.board.action.ActionScoreUpdated());
            var gameState = new ct.core.board.BoardGameState(level, board, zeroTileSource, zeroScorer);
            gameState.replaceTiles = false;
            return {
                gameState: gameState,
                actions: actions
            };
        }));
        var homeGameState = new ct.core.home.HomeGameState(levels);
        var boardGameStateRenderer = new ct.core.render.board.BoardGameStateRenderer(toTemplate("board"), {
            headerHeight: headerHeight,
            windowWidth: window.innerWidth,
            windowHeight: window.innerHeight
        }, window.location.pathname, headerHeight, homeGameState, extolSoundEffects, claimSoundEffect, invalidSoundEffect);
        var homeGameStateRenderer = new ct.core.render.home.HomeGameStateRenderer(toTemplate("home"), {}, window.location.pathname, window.innerWidth, window.innerHeight);
        var tileTemplate = toTemplate("tile");
        Handlebars.registerPartial("tile", tileTemplate);
        var actionDropTemplate = toTemplate("animate-action-drop");
        var attributeAnimationTemplate = toTemplate("animate-attribute");
        var tileClaimTemplate = toTemplate("animate-grow");
        var actionSource = null;
        var eatGameState = function (gameState, actions) {
            var stateRenderer = null;
            if (gameState instanceof ct.core.board.BoardGameState) {
                stateRenderer = boardGameStateRenderer;
            }
            else {
                stateRenderer = homeGameStateRenderer;
            }
            var el = document.getElementById('content');
            el.setAttribute("width", "" + window.innerWidth + "px");
            el.setAttribute("height", "" + window.innerHeight + "px");
            if (actionSource != null) {
                actionSource.stop();
            }
            actionSource = stateRenderer.render(gameState, el);
            var rendererFactory = new ct.core.render.HardcodedActionRendererFactory("#DDDDDD", "#BBFFBB", "#FFBBBB", "#BBBBFF", "#888888", tileTemplate, attributeAnimationTemplate, tileClaimTemplate, actionDropTemplate, dropTileSoundEffect);
            for (var i in actions) {
                var action = actions[i];
                action.perform(gameState);
                var renderer = rendererFactory.getActionRenderer(action);
                renderer.render(action, gameState, el, true);
            }
            actionSource.start(function (actions) {
                var switchedGameState = false;
                for (var i in actions) {
                    var action = actions[i];
                    var actionsAndGameState = action.perform(gameState);
                    var completionListener;
                    if (actionsAndGameState != null) {
                        var newGameState = actionsAndGameState.gameState;
                        var newActions = actionsAndGameState.actions;
                        if (newGameState != gameState && newGameState != null) {
                            if (!switchedGameState) {
                                completionListener = function () {
                                    eatGameState(newGameState, newActions);
                                };
                                switchedGameState = true;
                            }
                        }
                        else {
                            for (var j in newActions) {
                                var newAction = newActions[j];
                                actions.push(newAction);
                            }
                        }
                    }
                    var renderer = rendererFactory.getActionRenderer(action);
                    if (renderer != null) {
                        renderer.render(action, gameState, el, true, completionListener);
                    }
                    else {
                        if (completionListener != null) {
                            completionListener();
                        }
                    }
                }
            });
        };
        var loadState = function (state) {
            if (state != null && state.length > 0 && state.charAt(0) == "#") {
                state = state.substring(1);
            }
            var gameState;
            var actions;
            var selectedLevel = null;
            for (var i in levels) {
                var level = levels[i];
                if (level.id == state) {
                    selectedLevel = level;
                    break;
                }
            }
            if (selectedLevel != null) {
                var a = selectedLevel.gameStateFactory(selectedLevel);
                gameState = a.gameState;
                actions = a.actions;
            }
            else {
                gameState = homeGameState;
                actions = [];
            }
            eatGameState(gameState, actions);
        };
        window.onhashchange = function () {
            var hash = window.location.hash;
            loadState(hash);
        };
        loadState(window.location.hash);
    };
    function toTemplate(id) {
        var templateString = document.getElementById(id).innerHTML;
        return Handlebars.compile(templateString);
    }
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var Point = (function () {
            function Point(x, y) {
                this.x = x;
                this.y = y;
            }
            return Point;
        })();
        core.Point = Point;
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var SoundEffect = (function () {
            function SoundEffect(audioIds) {
                this.audioIds = audioIds;
                this.playCount = 0;
                this.inUse = {};
            }
            SoundEffect.prototype.play = function () {
                var _this = this;
                if (this.playCount > 0) {
                    window.setTimeout(function () {
                        _this.forcePlay();
                    }, 100 * this.playCount * Math.random());
                }
                else {
                    this.forcePlay();
                }
            };
            SoundEffect.prototype.forcePlay = function () {
                var _this = this;
                if (this.audioIds.length > 0) {
                    var index = Math.floor(Math.random() * this.audioIds.length);
                    var audioId = this.audioIds[index];
                    if (!this.inUse[audioId]) {
                        this.playCount++;
                        this.inUse[audioId] = true;
                        var audio = document.getElementById(audioId);
                        if (audio != null) {
                            var copy = audio;
                            copy.addEventListener("ended", function () {
                                _this.playCount--;
                                _this.inUse[audioId] = false;
                            });
                            copy.play();
                        }
                    }
                }
            };
            return SoundEffect;
        })();
        core.SoundEffect = SoundEffect;
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var Board = (function () {
                function Board(tilesAcross, tilesDown, tileWidth, tileHeight) {
                    this.tilesAcross = tilesAcross;
                    this.tilesDown = tilesDown;
                    this.tileWidth = tileWidth;
                    this.tileHeight = tileHeight;
                    this.id = "board-" + Board._boardId;
                    Board._boardId++;
                    this.tiles = new Array();
                    for (var x = 0; x < tilesAcross; x++) {
                        var column = new Array();
                        for (var y = 0; y < tilesDown; y++) {
                            column.push(null);
                        }
                        this.tiles.push(column);
                    }
                }
                Board.prototype.setTile = function (tile, x, y) {
                    tile.position.x = x;
                    tile.position.y = y;
                    tile.board = this;
                    this.tiles[x][y] = tile;
                };
                Board._boardId = 0;
                return Board;
            })();
            board.Board = Board;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var BoardGameState = (function () {
                function BoardGameState(level, board, tileSource, pointsSource, gameplayMilliseconds) {
                    this.level = level;
                    this.board = board;
                    this.tileSource = tileSource;
                    this.pointsSource = pointsSource;
                    this.gameplayMilliseconds = gameplayMilliseconds;
                    this.selectedTileChain = [];
                    this.startTime = null;
                    this.accumulatedPoints = 0;
                    this.replaceTiles = true;
                }
                BoardGameState.prototype.getId = function () {
                    return this.level.id;
                };
                BoardGameState.prototype.getName = function () {
                    return this.level.name;
                };
                Object.defineProperty(BoardGameState.prototype, "millisecondsRemaining", {
                    get: function () {
                        var result;
                        if (this.gameplayMilliseconds != null) {
                            if (this.startTime != null) {
                                result = this.gameplayMilliseconds - ((new Date()).getTime() - this.startTime.getTime());
                            }
                            else {
                                result = this.gameplayMilliseconds;
                            }
                        }
                        else {
                            result = null;
                        }
                        return result;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BoardGameState.prototype, "secondsRemainingFormatted", {
                    get: function () {
                        var milliseconds = this.millisecondsRemaining;
                        return this.getSecondsRemainingFormatted(milliseconds);
                    },
                    enumerable: true,
                    configurable: true
                });
                BoardGameState.prototype.getSecondsRemainingFormatted = function (milliseconds) {
                    var result;
                    if (milliseconds != null) {
                        var seconds = milliseconds / 1000;
                        var minutes = Math.floor(seconds / 60);
                        seconds = seconds % 60;
                        result = "" + seconds;
                        var dotIndex = result.indexOf('.');
                        if (dotIndex < 0) {
                            dotIndex = result.length;
                            result += ".0";
                        }
                        else {
                            result = result.substring(0, dotIndex + 2);
                        }
                        if (minutes > 0) {
                            while (dotIndex < 2) {
                                result = "0" + result;
                                dotIndex++;
                            }
                            result = "" + minutes + ":" + result;
                        }
                    }
                    else {
                        result = null;
                    }
                    return result;
                };
                BoardGameState.prototype.getAccumulatedPoints = function () {
                    return 0;
                };
                return BoardGameState;
            })();
            _board.BoardGameState = BoardGameState;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var FairTileSource = (function () {
                function FairTileSource(fairRatio, normalValues, symbolValues, cruelty, guaranteedSymbolValues) {
                    this.fairRatio = fairRatio;
                    this.normalValues = normalValues;
                    this.symbolValues = symbolValues;
                    this.cruelty = cruelty;
                    this.guaranteedSymbolValues = guaranteedSymbolValues;
                }
                FairTileSource.prototype.create = function (quantity, rerand) {
                    if (rerand == null) {
                        rerand = 0;
                    }
                    var numberOfSymbols = Math.floor(quantity * this.fairRatio);
                    return this.createQuantity(quantity - numberOfSymbols, numberOfSymbols, rerand, false);
                };
                FairTileSource.prototype.createQuantity = function (numberOfValues, numberOfSymbols, rerand, avoidForced) {
                    var result = [];
                    for (var i = 0; i < numberOfValues; i++) {
                        var r = Math.abs(this.rand(rerand) * 2 - 1);
                        var index = Math.floor(r * this.normalValues.length);
                        var value = this.normalValues[index];
                        var tile = new _board.Tile(value);
                        result.push(tile);
                    }
                    if (this.guaranteedSymbolValues != null && !avoidForced) {
                        for (var j in this.guaranteedSymbolValues) {
                            var value = this.guaranteedSymbolValues[j];
                            var tile = new _board.Tile(value);
                            var pos = Math.floor(Math.random() * result.length);
                            result.splice(pos, 0, tile);
                        }
                    }
                    for (var i = 0; i < numberOfSymbols; i++) {
                        var r = Math.abs(this.rand(rerand) * 2 - 1);
                        var index = Math.floor(r * this.symbolValues.length);
                        var pos = Math.floor(Math.random() * result.length);
                        var values = this.symbolValues[index];
                        var valueIndex = Math.floor(Math.random() * values.length);
                        var value = values[valueIndex];
                        var tile = new _board.Tile(value);
                        result.splice(pos, 0, tile);
                    }
                    return result;
                };
                FairTileSource.prototype.replace = function (board, tiles) {
                    var tileCount = board.tilesAcross * board.tilesDown - tiles.length;
                    var symbolTileCount = 0;
                    var rerand = this.cruelty;
                    for (var x = 0; x < board.tilesAcross; x++) {
                        for (var y = 0; y < board.tilesDown; y++) {
                            var tile = board.tiles[x][y];
                            if (tiles.indexOf(tile) < 0) {
                                if (!(tile.value instanceof ct.core.board.value.ValueNumeric)) {
                                    symbolTileCount++;
                                }
                            }
                        }
                    }
                    var symbolProportion = symbolTileCount / tileCount;
                    var symbolCount = 0;
                    for (var i = 0; i < tiles.length; i++) {
                        var r = this.rand(this.cruelty);
                        if (r * 2 * symbolProportion < this.fairRatio) {
                            symbolCount++;
                        }
                    }
                    return this.createQuantity(Math.max(tiles.length - symbolCount, 0), symbolCount, Math.max(rerand, 0), true);
                };
                FairTileSource.prototype.rand = function (rerand) {
                    var result = Math.random();
                    for (var i = 0; i < rerand; i++) {
                        result += Math.random();
                    }
                    return result / (rerand + 1);
                };
                return FairTileSource;
            })();
            _board.FairTileSource = FairTileSource;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var PointsSourceAccumulated = (function () {
                function PointsSourceAccumulated() {
                    this.name = "accumulated";
                }
                PointsSourceAccumulated.prototype.getPoints = function (gameState) {
                    return gameState.accumulatedPoints;
                };
                return PointsSourceAccumulated;
            })();
            board.PointsSourceAccumulated = PointsSourceAccumulated;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var PointsSourceMaxBoardValue = (function () {
                function PointsSourceMaxBoardValue() {
                    this.name = "maximum value";
                }
                PointsSourceMaxBoardValue.prototype.getPoints = function (gameState) {
                    var max = null;
                    var board = gameState.board;
                    for (var x = 0; x < board.tilesAcross; x++) {
                        for (var y = 0; y < board.tilesDown; y++) {
                            var tile = board.tiles[x][y];
                            if (tile.value instanceof ct.core.board.value.ValueNumeric) {
                                var numericValue = tile.value;
                                var value = numericValue.value;
                                if (max == null) {
                                    max = value;
                                }
                                else {
                                    max = Math.max(max, value);
                                }
                            }
                        }
                    }
                    return max;
                };
                return PointsSourceMaxBoardValue;
            })();
            _board.PointsSourceMaxBoardValue = PointsSourceMaxBoardValue;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var PointSourceTime = (function () {
                function PointSourceTime() {
                    this.name = "time";
                }
                PointSourceTime.prototype.getPoints = function (gameState) {
                    var time = gameState.startTime;
                    var result;
                    if (time != null) {
                        result = Math.floor(((new Date()).getTime() - time.getTime()) / 1000);
                    }
                    else {
                        result = 0;
                    }
                    return result;
                };
                return PointSourceTime;
            })();
            board.PointSourceTime = PointSourceTime;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var PointSourceZero = (function () {
                function PointSourceZero() {
                    this.name = "zero";
                }
                PointSourceZero.prototype.getPoints = function (gameState) {
                    var result = 0;
                    var board = gameState.board;
                    for (var x = 0; x < board.tilesAcross; x++) {
                        for (var y = 0; y < board.tilesDown; y++) {
                            var tile = board.tiles[x][y];
                            if (tile != null && tile.value instanceof ct.core.board.value.ValueNumeric) {
                                var numericValue = tile.value;
                                result += numericValue.value;
                            }
                        }
                    }
                    return -Math.abs(result);
                };
                return PointSourceZero;
            })();
            _board.PointSourceZero = PointSourceZero;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var PointsSourceBoardValue = (function () {
                function PointsSourceBoardValue() {
                    this.name = "board value";
                }
                PointsSourceBoardValue.prototype.getPoints = function (gameState) {
                    var result = 0;
                    var board = gameState.board;
                    for (var x = 0; x < board.tilesAcross; x++) {
                        for (var y = 0; y < board.tilesDown; y++) {
                            var tile = board.tiles[x][y];
                            if (tile != null && tile.value instanceof ct.core.board.value.ValueNumeric) {
                                var numericValue = tile.value;
                                result += numericValue.value;
                            }
                        }
                    }
                    return result;
                };
                return PointsSourceBoardValue;
            })();
            _board.PointsSourceBoardValue = PointsSourceBoardValue;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var Tile = (function () {
                function Tile(value) {
                    this.value = value;
                    this.id = "tile-" + Tile._tileId;
                    Tile._tileId++;
                    this.position = new core.Point();
                    this.symbol = value.toString();
                    this.selectionState = 0 /* UNSELECTED */;
                }
                Tile._tileId = 0;
                return Tile;
            })();
            board.Tile = Tile;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            (function (TileSelectionState) {
                TileSelectionState[TileSelectionState["UNSELECTED"] = 0] = "UNSELECTED";
                TileSelectionState[TileSelectionState["INVALID"] = 1] = "INVALID";
                TileSelectionState[TileSelectionState["VALID"] = 2] = "VALID";
                TileSelectionState[TileSelectionState["EXTRANEOUS"] = 3] = "EXTRANEOUS";
                TileSelectionState[TileSelectionState["BAD_PARAMETER"] = 4] = "BAD_PARAMETER";
            })(board.TileSelectionState || (board.TileSelectionState = {}));
            var TileSelectionState = board.TileSelectionState;
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var action;
            (function (action) {
                var ActionCreateTile = (function () {
                    function ActionCreateTile(tile, x, y) {
                        this.tile = tile;
                        this.x = x;
                        this.y = y;
                        tile.position.x = x;
                        tile.position.y = y;
                    }
                    ActionCreateTile.prototype.getPrimaryId = function () {
                        return this.tile.id;
                    };
                    ActionCreateTile.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var board = boardGameState.board;
                        board.setTile(this.tile, this.x, this.y);
                        return null;
                    };
                    return ActionCreateTile;
                })();
                action.ActionCreateTile = ActionCreateTile;
            })(action = _board.action || (_board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionDeselectTile = (function () {
                    function ActionDeselectTile(tile) {
                        this.tile = tile;
                    }
                    ActionDeselectTile.prototype.getPrimaryId = function () {
                        return this.tile.id;
                    };
                    ActionDeselectTile.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var index = boardGameState.selectedTileChain.indexOf(this.tile);
                        if (index >= 0) {
                            boardGameState.selectedTileChain.splice(index, 1);
                        }
                        this.tile.selectionState = 0 /* UNSELECTED */;
                        return null;
                    };
                    return ActionDeselectTile;
                })();
                action.ActionDeselectTile = ActionDeselectTile;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var action;
            (function (action) {
                var ActionDestroyTile = (function () {
                    function ActionDestroyTile(tile) {
                        this.tile = tile;
                    }
                    ActionDestroyTile.prototype.getPrimaryId = function () {
                        return this.tile.id;
                    };
                    ActionDestroyTile.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var board = boardGameState.board;
                        var pos = this.tile.position;
                        board.tiles[pos.x][pos.y] = null;
                        return null;
                    };
                    return ActionDestroyTile;
                })();
                action.ActionDestroyTile = ActionDestroyTile;
            })(action = _board.action || (_board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (_board) {
            var action;
            (function (action) {
                var ActionDropTile = (function () {
                    function ActionDropTile(tile, column, fromRow, toRow) {
                        this.tile = tile;
                        this.column = column;
                        this.fromRow = fromRow;
                        this.toRow = toRow;
                        this.dRow = toRow - fromRow;
                    }
                    ActionDropTile.prototype.getPrimaryId = function () {
                        return this.tile.id;
                    };
                    ActionDropTile.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var board = boardGameState.board;
                        if (this.fromRow >= 0) {
                            if (board.tiles[this.column][this.fromRow] == this.tile) {
                                board.tiles[this.column][this.fromRow] = null;
                            }
                        }
                        board.setTile(this.tile, this.column, this.toRow);
                        return null;
                    };
                    return ActionDropTile;
                })();
                action.ActionDropTile = ActionDropTile;
            })(action = _board.action || (_board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionScoreAccumulated = (function () {
                    function ActionScoreAccumulated(score, boardGameState) {
                        this.score = score;
                        this.boardGameState = boardGameState;
                    }
                    ActionScoreAccumulated.prototype.getPrimaryId = function () {
                        return this.boardGameState.board.id;
                    };
                    ActionScoreAccumulated.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        boardGameState.accumulatedPoints += this.score;
                        return null;
                    };
                    return ActionScoreAccumulated;
                })();
                action.ActionScoreAccumulated = ActionScoreAccumulated;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionScoreUpdated = (function () {
                    function ActionScoreUpdated() {
                    }
                    ActionScoreUpdated.prototype.getPrimaryId = function () {
                        return null;
                    };
                    ActionScoreUpdated.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var points = boardGameState.pointsSource.getPoints(boardGameState);
                        if (boardGameState.level.highScore == null) {
                            boardGameState.level.highScore = points;
                        }
                        else {
                            boardGameState.level.highScore = Math.max(points, boardGameState.level.highScore);
                        }
                        return null;
                    };
                    return ActionScoreUpdated;
                })();
                action.ActionScoreUpdated = ActionScoreUpdated;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionSetTileSelectionState = (function () {
                    function ActionSetTileSelectionState(tile, newSelectionState) {
                        this.tile = tile;
                        this.newSelectionState = newSelectionState;
                        this.originalSelectionState = tile.selectionState;
                    }
                    ActionSetTileSelectionState.prototype.getPrimaryId = function () {
                        return this.tile.id;
                    };
                    ActionSetTileSelectionState.prototype.perform = function (gameState) {
                        this.tile.selectionState = this.newSelectionState;
                        return null;
                    };
                    return ActionSetTileSelectionState;
                })();
                action.ActionSetTileSelectionState = ActionSetTileSelectionState;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionSelectTile = (function (_super) {
                    __extends(ActionSelectTile, _super);
                    function ActionSelectTile(tile, selectionState) {
                        _super.call(this, tile, selectionState);
                    }
                    ActionSelectTile.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        var selectedTileChain = boardGameState.selectedTileChain;
                        selectedTileChain.push(this.tile);
                        return _super.prototype.perform.call(this, gameState);
                    };
                    return ActionSelectTile;
                })(action.ActionSetTileSelectionState);
                action.ActionSelectTile = ActionSelectTile;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var action;
            (function (action) {
                var ActionTimeRemainingUpdated = (function () {
                    function ActionTimeRemainingUpdated(secondsRemainingFormatted, boardGameState, bonusTime, startTime, gameState) {
                        this.secondsRemainingFormatted = secondsRemainingFormatted;
                        this.boardGameState = boardGameState;
                        this.bonusTime = bonusTime;
                        this.startTime = startTime;
                        this.gameState = gameState;
                    }
                    ActionTimeRemainingUpdated.prototype.getPrimaryId = function () {
                        return this.boardGameState.board.id;
                    };
                    ActionTimeRemainingUpdated.prototype.perform = function (gameState) {
                        var boardGameState = gameState;
                        if (this.bonusTime) {
                            boardGameState.gameplayMilliseconds += this.bonusTime;
                        }
                        if (this.startTime) {
                            boardGameState.startTime = this.startTime;
                        }
                        return { gameState: this.gameState, actions: [] };
                    };
                    return ActionTimeRemainingUpdated;
                })();
                action.ActionTimeRemainingUpdated = ActionTimeRemainingUpdated;
            })(action = board.action || (board.action = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionAbs = (function (_super) {
                    __extends(ValueFunctionAbs, _super);
                    function ValueFunctionAbs() {
                        _super.call(this, true, 1, 'abs');
                    }
                    ValueFunctionAbs.prototype.eval = function (params) {
                        return Math.abs(params[0]);
                    };
                    return ValueFunctionAbs;
                })(value.AbstractValue);
                value.ValueFunctionAbs = ValueFunctionAbs;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (_value) {
                var ValueFunctionAccumulate = (function (_super) {
                    __extends(ValueFunctionAccumulate, _super);
                    function ValueFunctionAccumulate() {
                        _super.call(this, false, 1, "acc");
                    }
                    ValueFunctionAccumulate.prototype.eval = function (params) {
                        return params[0];
                    };
                    ValueFunctionAccumulate.prototype.terminate = function (terminationTiles, boardState, value) {
                        return [
                            new ct.core.board.action.ActionScoreAccumulated(value, boardState)
                        ];
                    };
                    return ValueFunctionAccumulate;
                })(_value.AbstractValue);
                _value.ValueFunctionAccumulate = ValueFunctionAccumulate;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (_value) {
                var ValueFunctionAddTime = (function (_super) {
                    __extends(ValueFunctionAddTime, _super);
                    function ValueFunctionAddTime() {
                        _super.call(this, false, 1, "tim");
                    }
                    ValueFunctionAddTime.prototype.eval = function (params) {
                        return params[0];
                    };
                    ValueFunctionAddTime.prototype.terminate = function (terminationTiles, boardState, value) {
                        var millisecondsRemaining = boardState.millisecondsRemaining;
                        if (millisecondsRemaining != null) {
                            millisecondsRemaining += value * 10000;
                        }
                        var secondsRemainingFormatted = boardState.getSecondsRemainingFormatted(millisecondsRemaining);
                        return [
                            new ct.core.board.action.ActionTimeRemainingUpdated(secondsRemainingFormatted, boardState, value * 1000)
                        ];
                    };
                    return ValueFunctionAddTime;
                })(_value.AbstractValue);
                _value.ValueFunctionAddTime = ValueFunctionAddTime;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionAddition = (function (_super) {
                    __extends(ValueFunctionAddition, _super);
                    function ValueFunctionAddition() {
                        _super.call(this, true, 2, '+');
                    }
                    ValueFunctionAddition.prototype.eval = function (params) {
                        var result = 0;
                        for (var i in params) {
                            var param = params[i];
                            result += param;
                        }
                        return result;
                    };
                    return ValueFunctionAddition;
                })(value.AbstractValue);
                value.ValueFunctionAddition = ValueFunctionAddition;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionDecrement = (function (_super) {
                    __extends(ValueFunctionDecrement, _super);
                    function ValueFunctionDecrement() {
                        _super.call(this, true, 1, 'dec');
                    }
                    ValueFunctionDecrement.prototype.eval = function (params) {
                        return params[0] - 1;
                    };
                    return ValueFunctionDecrement;
                })(value.AbstractValue);
                value.ValueFunctionDecrement = ValueFunctionDecrement;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionDestroy = (function (_super) {
                    __extends(ValueFunctionDestroy, _super);
                    function ValueFunctionDestroy() {
                        _super.call(this, false, 1, "kil");
                    }
                    ValueFunctionDestroy.prototype.eval = function (params) {
                        return params[0];
                    };
                    return ValueFunctionDestroy;
                })(value.AbstractValue);
                value.ValueFunctionDestroy = ValueFunctionDestroy;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionIncrement = (function (_super) {
                    __extends(ValueFunctionIncrement, _super);
                    function ValueFunctionIncrement() {
                        _super.call(this, true, 1, 'inc');
                    }
                    ValueFunctionIncrement.prototype.eval = function (params) {
                        return params[0] + 1;
                    };
                    return ValueFunctionIncrement;
                })(value.AbstractValue);
                value.ValueFunctionIncrement = ValueFunctionIncrement;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionMultiplication = (function (_super) {
                    __extends(ValueFunctionMultiplication, _super);
                    function ValueFunctionMultiplication() {
                        _super.call(this, true, 2, "*");
                    }
                    ValueFunctionMultiplication.prototype.eval = function (params) {
                        var result = 1;
                        for (var i in params) {
                            var param = params[i];
                            result *= param;
                        }
                        return result;
                    };
                    return ValueFunctionMultiplication;
                })(value.AbstractValue);
                value.ValueFunctionMultiplication = ValueFunctionMultiplication;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionNegate = (function (_super) {
                    __extends(ValueFunctionNegate, _super);
                    function ValueFunctionNegate() {
                        _super.call(this, true, 1, 'neg');
                    }
                    ValueFunctionNegate.prototype.eval = function (params) {
                        return -(params[0]);
                    };
                    return ValueFunctionNegate;
                })(value.AbstractValue);
                value.ValueFunctionNegate = ValueFunctionNegate;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (value) {
                var ValueFunctionSubtraction = (function (_super) {
                    __extends(ValueFunctionSubtraction, _super);
                    function ValueFunctionSubtraction() {
                        _super.call(this, true, 2, '-');
                    }
                    ValueFunctionSubtraction.prototype.eval = function (params) {
                        var result = params[0];
                        for (var i = 1; i < params.length; i++) {
                            var param = params[i];
                            result -= param;
                        }
                        return result;
                    };
                    return ValueFunctionSubtraction;
                })(value.AbstractValue);
                value.ValueFunctionSubtraction = ValueFunctionSubtraction;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var board;
        (function (board) {
            var value;
            (function (_value) {
                var ValueNumeric = (function (_super) {
                    __extends(ValueNumeric, _super);
                    function ValueNumeric(value) {
                        _super.call(this, true, 0, "" + value);
                        this.value = value;
                    }
                    ValueNumeric.prototype.eval = function (params) {
                        return this.value;
                    };
                    return ValueNumeric;
                })(_value.AbstractValue);
                _value.ValueNumeric = ValueNumeric;
            })(value = board.value || (board.value = {}));
        })(board = core.board || (core.board = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var home;
        (function (home) {
            var HomeGameState = (function () {
                function HomeGameState(levels) {
                    this.levels = levels;
                }
                HomeGameState.prototype.getId = function () {
                    return "";
                };
                HomeGameState.prototype.getName = function () {
                    return "Code Tower";
                };
                return HomeGameState;
            })();
            home.HomeGameState = HomeGameState;
        })(home = core.home || (core.home = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var home;
        (function (home) {
            var Level = (function () {
                function Level(id, name, description, locked, gameStateFactory) {
                    this.id = id;
                    this.name = name;
                    this.description = description;
                    this.locked = locked;
                    this.gameStateFactory = gameStateFactory;
                    this.highScore = null;
                    this.position = new core.Point();
                }
                return Level;
            })();
            home.Level = Level;
        })(home = core.home || (core.home = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var home;
        (function (home) {
            var action;
            (function (action) {
                var ActionLevelSelect = (function () {
                    function ActionLevelSelect(level) {
                        this.level = level;
                    }
                    ActionLevelSelect.prototype.getPrimaryId = function () {
                        return this.level.id;
                    };
                    ActionLevelSelect.prototype.perform = function (gameState) {
                        return this.level.gameStateFactory(this.level);
                    };
                    return ActionLevelSelect;
                })();
                action.ActionLevelSelect = ActionLevelSelect;
            })(action = home.action || (home.action = {}));
        })(home = core.home || (core.home = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var HandlebarsGameStateRenderer = (function () {
                function HandlebarsGameStateRenderer(template, params, baseUrl) {
                    this.template = template;
                    this.params = params;
                    this.baseUrl = baseUrl;
                }
                HandlebarsGameStateRenderer.prototype.render = function (gameState, div) {
                    this.params["gameState"] = gameState;
                    this.doRender(gameState, div, this.params);
                    var id = gameState.getId();
                    window.history.pushState(id, gameState.getName(), this.baseUrl + "#" + id);
                    return null;
                };
                HandlebarsGameStateRenderer.prototype.doRender = function (gameState, div, parameters) {
                    while (div.firstChild) {
                        div.removeChild(div.firstChild);
                    }
                    var html = this.template(parameters);
                    var nodes = render.HandlebarsSVGAnimationActionRenderer.parseSVG(html);
                    for (var i in nodes) {
                        var node = nodes[i];
                        div.appendChild(node);
                    }
                };
                return HandlebarsGameStateRenderer;
            })();
            render.HandlebarsGameStateRenderer = HandlebarsGameStateRenderer;
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var HandlebarsSVGAnimationActionRenderer = (function () {
                function HandlebarsSVGAnimationActionRenderer(template, params) {
                    this.template = template;
                    this.params = params;
                }
                HandlebarsSVGAnimationActionRenderer.prototype.render = function (action, gameState, div, animate, onCompletionListener) {
                    var _this = this;
                    var target = this.findOrCreateTarget(action, gameState, div);
                    if (animate) {
                        var animationId = "anim-" + HandlebarsSVGAnimationActionRenderer._animationId;
                        HandlebarsSVGAnimationActionRenderer._animationId++;
                        this.params["gameState"] = gameState;
                        this.params["action"] = action;
                        this.params["animationId"] = animationId;
                        this.adjustParams(action, gameState, this.params);
                        var animationSVG = this.template(this.params);
                        var animationNodes = HandlebarsSVGAnimationActionRenderer.parseSVG(animationSVG);
                        var animationCompletionCount = 0;
                        for (var i in animationNodes) {
                            var animationNode = animationNodes[i];
                            console.log("animating " + animationNode.tagName);
                            animationNode.addEventListener('endEvent', function () {
                                _this.setToFinalState(action, gameState, target);
                                target.removeChild(animationNode);
                                animationCompletionCount++;
                                if (animationCompletionCount == animationNodes.length) {
                                    _this.onCompletion(true);
                                    if (onCompletionListener) {
                                        onCompletionListener(action, gameState);
                                    }
                                }
                            });
                            target.appendChild(animationNode);
                            animationNode.beginElement();
                        }
                    }
                    else {
                        this.setToFinalState(action, gameState, target);
                        this.onCompletion(false);
                        if (onCompletionListener) {
                            onCompletionListener(action, gameState);
                        }
                    }
                };
                HandlebarsSVGAnimationActionRenderer.prototype.onCompletion = function (animated) {
                };
                HandlebarsSVGAnimationActionRenderer.prototype.adjustParams = function (action, gameState, params) {
                };
                HandlebarsSVGAnimationActionRenderer.prototype.setToFinalState = function (action, gameState, target) {
                };
                HandlebarsSVGAnimationActionRenderer.prototype.findOrCreateTarget = function (action, gameState, div) {
                    return div;
                };
                HandlebarsSVGAnimationActionRenderer.parseSVG = function (s, targetId) {
                    var div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
                    div.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg">' + s + '</svg>';
                    var result = [];
                    for (var i in div.childNodes) {
                        var childNode = div.childNodes[i];
                        for (var j in childNode.childNodes) {
                            var c = childNode.childNodes[j];
                            if (c.tagName != null && (targetId == null || c.getAttribute("id") == targetId)) {
                                result.push(c);
                            }
                        }
                    }
                    return result;
                };
                HandlebarsSVGAnimationActionRenderer._animationId = 0;
                return HandlebarsSVGAnimationActionRenderer;
            })();
            render.HandlebarsSVGAnimationActionRenderer = HandlebarsSVGAnimationActionRenderer;
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var HandlebarsSVGAnimationAttributeActionRenderer = (function (_super) {
                __extends(HandlebarsSVGAnimationAttributeActionRenderer, _super);
                function HandlebarsSVGAnimationAttributeActionRenderer(animationTemplate, attributeName, startValue, endValue, idPostfix, params, removeAllWhenDone) {
                    _super.call(this, animationTemplate, params);
                    this.attributeName = attributeName;
                    this.startValue = startValue;
                    this.endValue = endValue;
                    this.idPostfix = idPostfix;
                    this.removeAllWhenDone = removeAllWhenDone;
                }
                HandlebarsSVGAnimationAttributeActionRenderer.prototype.adjustParams = function (action, gameState, params) {
                    params["from"] = this.startValue;
                    params["to"] = this.endValue;
                    params["attributeName"] = this.attributeName;
                };
                HandlebarsSVGAnimationAttributeActionRenderer.prototype.setToFinalState = function (action, gameState, target) {
                    var boardGameState = gameState;
                    var actionDrop = action;
                    var board = boardGameState.board;
                    target.setAttribute(this.attributeName, this.endValue);
                    if (this.removeAllWhenDone && target.parentNode) {
                        target.parentNode.removeChild(target);
                    }
                };
                HandlebarsSVGAnimationAttributeActionRenderer.prototype.findOrCreateTarget = function (action, gameState, div) {
                    var boardGameState = gameState;
                    var board = boardGameState.board;
                    var id = action.getPrimaryId() + this.idPostfix;
                    var result = document.getElementById(id);
                    return result;
                };
                return HandlebarsSVGAnimationAttributeActionRenderer;
            })(render.HandlebarsSVGAnimationActionRenderer);
            render.HandlebarsSVGAnimationAttributeActionRenderer = HandlebarsSVGAnimationAttributeActionRenderer;
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var HardcodedActionRendererFactory = (function () {
                function HardcodedActionRendererFactory(tileColor, validTileSelectColor, invalidTileSelectColor, extraneousTileSelectColor, badParameterTileSelectionColor, tileTemplate, attributeAnimationTemplate, tileClaimTemplate, dropTileAnimationTemplate, dropTileSoundEffect) {
                    this.selectTileActionRenderer = new ct.core.render.board.HandlebarsSVGAnimationActionSetTileSelectionStateRenderer(attributeAnimationTemplate, tileColor, validTileSelectColor, invalidTileSelectColor, extraneousTileSelectColor, badParameterTileSelectionColor, "-bg", {});
                    this.dropTileActionRenderer = new ct.core.render.board.HandlebarsSVGAnimationActionDropTileRenderer(dropTileAnimationTemplate, tileTemplate, tileColor, dropTileSoundEffect, {});
                    this.destroyTileActionRenderer = new ct.core.render.HandlebarsSVGAnimationAttributeActionRenderer(tileClaimTemplate, "opacity", "1", "0", "-container", {}, true);
                    this.createTileActionRenderer = new ct.core.render.board.HandlebarsSVGAnimationActionCreateTileRenderer(attributeAnimationTemplate, tileTemplate, tileColor, {});
                    this.actionTimeRemainingUpdatedRenderer = new ct.core.render.board.action.ActionTimeRemainingUpdatedRenderer();
                    this.actionUpdatePointsRenderer = new ct.core.render.board.action.ActionUpdatePointsRenderer();
                }
                HardcodedActionRendererFactory.prototype.getActionRenderer = function (action) {
                    var result;
                    if (action instanceof ct.core.board.action.ActionDeselectTile || action instanceof ct.core.board.action.ActionSelectTile || action instanceof ct.core.board.action.ActionSetTileSelectionState) {
                        result = this.selectTileActionRenderer;
                    }
                    else if (action instanceof ct.core.board.action.ActionDropTile) {
                        result = this.dropTileActionRenderer;
                    }
                    else if (action instanceof ct.core.board.action.ActionCreateTile) {
                        result = this.createTileActionRenderer;
                    }
                    else if (action instanceof ct.core.board.action.ActionDestroyTile) {
                        result = this.destroyTileActionRenderer;
                    }
                    else if (action instanceof ct.core.board.action.ActionTimeRemainingUpdated) {
                        result = this.actionTimeRemainingUpdatedRenderer;
                    }
                    else if (action instanceof ct.core.board.action.ActionScoreUpdated || action instanceof ct.core.board.action.ActionScoreAccumulated) {
                        result = this.actionUpdatePointsRenderer;
                    }
                    else {
                        result = null;
                    }
                    return result;
                };
                return HardcodedActionRendererFactory;
            })();
            render.HardcodedActionRendererFactory = HardcodedActionRendererFactory;
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var action;
                (function (_action) {
                    var ActionTimeRemainingUpdatedRenderer = (function () {
                        function ActionTimeRemainingUpdatedRenderer() {
                        }
                        ActionTimeRemainingUpdatedRenderer.prototype.render = function (action, gameState, div, animate, onCompletionListener) {
                            var timeAction = action;
                            var boardGameState = gameState;
                            var board = boardGameState.board;
                            var element = document.getElementById(board.id + "-time");
                            element.textContent = timeAction.secondsRemainingFormatted;
                            if (onCompletionListener) {
                                onCompletionListener();
                            }
                        };
                        return ActionTimeRemainingUpdatedRenderer;
                    })();
                    _action.ActionTimeRemainingUpdatedRenderer = ActionTimeRemainingUpdatedRenderer;
                })(action = _board.action || (_board.action = {}));
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var action;
                (function (_action) {
                    var ActionUpdatePointsRenderer = (function () {
                        function ActionUpdatePointsRenderer() {
                        }
                        ActionUpdatePointsRenderer.prototype.render = function (action, gameState, div, animate, onCompletionListener) {
                            var boardGameState = gameState;
                            var boardGameState = gameState;
                            var board = boardGameState.board;
                            var points = boardGameState.pointsSource.getPoints(boardGameState);
                            var element = document.getElementById(board.id + "-score");
                            element.textContent = "" + points;
                            if (onCompletionListener) {
                                onCompletionListener();
                            }
                        };
                        return ActionUpdatePointsRenderer;
                    })();
                    _action.ActionUpdatePointsRenderer = ActionUpdatePointsRenderer;
                })(action = _board.action || (_board.action = {}));
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (board) {
                var BoardGameStateActionSource = (function () {
                    function BoardGameStateActionSource(gameState, homeGameState, div, headerHeight, extols, claim, invalid) {
                        this.gameState = gameState;
                        this.homeGameState = homeGameState;
                        this.div = div;
                        this.headerHeight = headerHeight;
                        this.extols = extols;
                        this.claim = claim;
                        this.invalid = invalid;
                        this.mouseDown = false;
                    }
                    BoardGameStateActionSource.prototype.countDown = function (startTime) {
                        var _this = this;
                        var timeRemaining = this.gameState.millisecondsRemaining;
                        if (timeRemaining != null) {
                            var timeoutGameState;
                            if (timeRemaining <= 0) {
                                timeoutGameState = this.homeGameState;
                            }
                            else {
                                timeoutGameState = null;
                            }
                            this.actionHandler([
                                new ct.core.board.action.ActionTimeRemainingUpdated(this.gameState.secondsRemainingFormatted, this.gameState, null, startTime, timeoutGameState),
                                new ct.core.board.action.ActionScoreUpdated()
                            ]);
                            this.timerId = setTimeout(function () {
                                _this.countDown();
                            }, (timeRemaining % 100) + 1);
                        }
                    };
                    BoardGameStateActionSource.prototype.start = function (actionHandler) {
                        var _this = this;
                        this.actionHandler = actionHandler;
                        var firstTap = true;
                        var mouseDownHandler = function (e) {
                            var tile = _this.getTile(e);
                            if (tile) {
                                _this.mouseDown = true;
                                console.log("mouse down!");
                                var states = _this.calculateSelectionStates([tile.value]);
                                var action = new ct.core.board.action.ActionSelectTile(tile, states[0]);
                                actionHandler([action]);
                                if (firstTap) {
                                    _this.countDown(new Date());
                                    firstTap = false;
                                }
                            }
                        };
                        var mouseUpHandler = function () {
                            if (_this.mouseDown) {
                                _this.mouseDown = false;
                                var actions = _this.actionTiles(_this.gameState, _this.gameState.selectedTileChain);
                                for (var i in _this.gameState.selectedTileChain) {
                                    var tile = _this.gameState.selectedTileChain[i];
                                    var action = new ct.core.board.action.ActionDeselectTile(tile);
                                    actions.push(action);
                                }
                                actionHandler(actions);
                            }
                        };
                        var mouseMoveHandler = function (e) {
                            if (_this.mouseDown) {
                                var tile = _this.getTile(e);
                                if (tile) {
                                    var index = _this.gameState.selectedTileChain.indexOf(tile);
                                    if (index >= 0) {
                                        if (index < _this.gameState.selectedTileChain.length - 1) {
                                            var actions = [];
                                            for (var i = index + 1; i < _this.gameState.selectedTileChain.length; i++) {
                                                var tile = _this.gameState.selectedTileChain[i];
                                                var action = new ct.core.board.action.ActionDeselectTile(tile);
                                                actions.push(action);
                                            }
                                            var tiles = [];
                                            for (var i = 0; i <= index; i++) {
                                                var selectedTile = _this.gameState.selectedTileChain[i];
                                                tiles.push(selectedTile);
                                            }
                                            var values = _this.toValues(tiles);
                                            var states = _this.calculateSelectionStates(values);
                                            for (var i = 0; i <= index; i++) {
                                                var selectedTile = tiles[i];
                                                var state = states[i];
                                                if (state != selectedTile.selectionState) {
                                                    var setSelectionStateAction = new ct.core.board.action.ActionSetTileSelectionState(selectedTile, state);
                                                    actions.push(setSelectionStateAction);
                                                }
                                            }
                                            actionHandler(actions);
                                        }
                                    }
                                    else {
                                        if (_this.gameState.selectedTileChain.length > 0) {
                                            var lastSelectedTile = _this.gameState.selectedTileChain[_this.gameState.selectedTileChain.length - 1];
                                            if (lastSelectedTile != null && (lastSelectedTile.position.x == tile.position.x && (lastSelectedTile.position.y == tile.position.y - 1 || lastSelectedTile.position.y == tile.position.y + 1) || lastSelectedTile.position.y == tile.position.y && (lastSelectedTile.position.x == tile.position.x - 1 || lastSelectedTile.position.x == tile.position.x + 1))) {
                                                var tiles = [];
                                                for (var j in _this.gameState.selectedTileChain) {
                                                    var selectedTile = _this.gameState.selectedTileChain[j];
                                                    tiles.push(selectedTile);
                                                }
                                                tiles.push(tile);
                                                var values = _this.toValues(tiles);
                                                var states = _this.calculateSelectionStates(values);
                                                var action = new ct.core.board.action.ActionSelectTile(tile, states[states.length - 1]);
                                                var actions = [action];
                                                for (var i = 0; i < tiles.length - 1; i++) {
                                                    var selectedTile = tiles[i];
                                                    var state = states[i];
                                                    if (state != selectedTile.selectionState) {
                                                        var setSelectionStateAction = new ct.core.board.action.ActionSetTileSelectionState(selectedTile, state);
                                                        actions.push(setSelectionStateAction);
                                                    }
                                                }
                                                actionHandler(actions);
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        this.div.onmousedown = mouseDownHandler;
                        this.div.onmouseup = mouseUpHandler;
                        this.div.onmousemove = mouseMoveHandler;
                        this.touchStartListener = function (e) {
                            mouseDownHandler(e.touches[0]);
                            e.preventDefault();
                        };
                        this.touchMoveListener = function (e) {
                            mouseMoveHandler(e.touches[0]);
                            e.preventDefault();
                        };
                        this.touchEndListener = function (e) {
                            mouseUpHandler();
                            e.preventDefault();
                        };
                        this.div.addEventListener('touchstart', this.touchStartListener);
                        this.div.addEventListener('touchmove', this.touchMoveListener);
                        this.div.addEventListener('touchend', this.touchEndListener);
                    };
                    BoardGameStateActionSource.prototype.stop = function () {
                        this.div.onmousedown = null;
                        this.div.onmouseup = null;
                        this.div.onmousemove = null;
                        this.div.removeEventListener("touchstart", this.touchStartListener);
                        this.div.removeEventListener("touchmove", this.touchMoveListener);
                        this.div.removeEventListener("touchend", this.touchEndListener);
                        if (this.timerId != null) {
                            clearTimeout(this.timerId);
                            this.timerId = null;
                        }
                    };
                    BoardGameStateActionSource.prototype.getTile = function (e) {
                        var result;
                        var x = e.clientX;
                        var y = e.clientY - this.headerHeight;
                        var boardWidth = this.gameState.board.tileWidth * this.gameState.board.tilesAcross;
                        var boardHeight = this.gameState.board.tileHeight * this.gameState.board.tilesDown;
                        if (x < boardWidth && y < boardHeight) {
                            var tx = Math.floor(x / this.gameState.board.tileWidth);
                            var ty = Math.floor(y / this.gameState.board.tileHeight);
                            result = this.gameState.board.tiles[tx][ty];
                        }
                        else {
                            result = null;
                        }
                        return result;
                    };
                    BoardGameStateActionSource.prototype.calculateSelectionStates = function (values) {
                        var result = [];
                        this.calculateSelectionStates2(values, result, false);
                        for (var i in values) {
                            result.push(3 /* EXTRANEOUS */);
                        }
                        return result;
                    };
                    BoardGameStateActionSource.prototype.calculateSelectionStates2 = function (values, states, isParameter) {
                        var result;
                        if (values.length > 0) {
                            var head = values.splice(0, 1);
                            var value = head[0];
                            var numberOfParams = value.numberOfParams;
                            result = true;
                            var stateIndex = states.length;
                            for (var i = 0; i < numberOfParams; i++) {
                                result = this.calculateSelectionStates2(values, states, true) && result;
                            }
                            var state;
                            if (isParameter && !value.evalReturnsNumber) {
                                state = 4 /* BAD_PARAMETER */;
                                result = false;
                            }
                            else if (result) {
                                state = 2 /* VALID */;
                            }
                            else {
                                state = 1 /* INVALID */;
                            }
                            states.splice(stateIndex, 0, state);
                        }
                        else {
                            result = false;
                        }
                        return result;
                    };
                    BoardGameStateActionSource.prototype.eval = function (values) {
                        if (values.length > 0) {
                            var head = values.splice(0, 1);
                            var value = head[0];
                            var numberOfParams = value.numberOfParams;
                            var params = [];
                            for (var i = 0; i < numberOfParams; i++) {
                                var param = this.eval(values);
                                params.push(param);
                            }
                            return value.eval(params);
                        }
                        else {
                            throw "too short!";
                        }
                    };
                    BoardGameStateActionSource.prototype.toValues = function (tiles) {
                        var values = [];
                        for (var i in tiles) {
                            var tile = tiles[i];
                            values.push(tile.value);
                        }
                        return values;
                    };
                    BoardGameStateActionSource.prototype.actionTiles = function (boardGameState, tiles) {
                        var result = [];
                        try {
                            var values = this.toValues(tiles);
                            var value = this.eval(values);
                            if (values.length > 0) {
                                throw "too long!";
                            }
                            for (var i in tiles) {
                                var tile = tiles[i];
                                var action = new ct.core.board.action.ActionDestroyTile(tile);
                                result.push(action);
                            }
                            var newTiles = [];
                            if (value != null) {
                                var valueActions = tiles[0].value.terminate(tiles, this.gameState, value);
                                for (var i in valueActions) {
                                    var action = valueActions[i];
                                    if (action instanceof ct.core.board.action.ActionCreateTile) {
                                        var createTileAction = action;
                                        newTiles.push(createTileAction.tile);
                                    }
                                    result.push(action);
                                }
                            }
                            var dropInTiles;
                            var dropInTileIndex = 0;
                            if (boardGameState.replaceTiles) {
                                dropInTiles = boardGameState.tileSource.replace(boardGameState.board, tiles);
                            }
                            for (var x = 0; x < this.gameState.board.tilesAcross; x++) {
                                var removed = 0;
                                for (var y = this.gameState.board.tilesDown; y > 0;) {
                                    y--;
                                    var tile = this.gameState.board.tiles[x][y];
                                    if (tile != null) {
                                        var index = tiles.indexOf(tile);
                                        if (index >= 0) {
                                            var newTileIndex = null;
                                            for (var i in newTiles) {
                                                var newTile = newTiles[i];
                                                if (newTile.position.x == x && newTile.position.y == y) {
                                                    newTileIndex = i;
                                                    break;
                                                }
                                            }
                                            if (newTileIndex != null) {
                                                tile = newTiles[newTileIndex];
                                            }
                                            else {
                                                removed++;
                                                tile = null;
                                            }
                                        }
                                        if (tile != null && removed > 0) {
                                            var action = new ct.core.board.action.ActionDropTile(tile, x, y, y + removed);
                                            result.push(action);
                                        }
                                    }
                                }
                                if (boardGameState.replaceTiles) {
                                    for (var j = 0; j < removed; j++) {
                                        var tile = dropInTiles[dropInTileIndex];
                                        dropInTileIndex++;
                                        var action = new ct.core.board.action.ActionDropTile(tile, x, j - removed, j);
                                        result.push(action);
                                    }
                                }
                            }
                            result.push(new ct.core.board.action.ActionScoreUpdated());
                            var extolIndex = Math.min(this.extols.length - 1, Math.max(0, tiles.length - 3));
                            var extol = this.extols[extolIndex];
                            setTimeout(function () {
                                extol.play();
                            }, Math.random() * 500);
                            this.claim.play();
                        }
                        catch (e) {
                            this.invalid.play();
                        }
                        return result;
                    };
                    return BoardGameStateActionSource;
                })();
                board.BoardGameStateActionSource = BoardGameStateActionSource;
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var BoardGameStateRenderer = (function (_super) {
                    __extends(BoardGameStateRenderer, _super);
                    function BoardGameStateRenderer(template, params, baseUrl, headerHeight, homeGameState, extols, claim, invalid) {
                        _super.call(this, template, params, baseUrl);
                        this.headerHeight = headerHeight;
                        this.homeGameState = homeGameState;
                        this.extols = extols;
                        this.claim = claim;
                        this.invalid = invalid;
                    }
                    BoardGameStateRenderer.prototype.render = function (gameState, div) {
                        _super.prototype.render.call(this, gameState, div);
                        return new _board.BoardGameStateActionSource(gameState, this.homeGameState, div, this.headerHeight, this.extols, this.claim, this.invalid);
                    };
                    BoardGameStateRenderer.prototype.doRender = function (gameState, div, parameters) {
                        var boardGameState = gameState;
                        var board = boardGameState.board;
                        var boardWidth = board.tilesAcross * board.tileWidth;
                        var boardHeight = board.tilesDown * board.tileHeight;
                        parameters["boardWidth"] = boardWidth;
                        parameters["boardHeight"] = boardHeight;
                        parameters["tileWidth"] = board.tileWidth;
                        parameters["tileHeight"] = board.tileHeight;
                        _super.prototype.doRender.call(this, gameState, div, parameters);
                    };
                    return BoardGameStateRenderer;
                })(render.HandlebarsGameStateRenderer);
                _board.BoardGameStateRenderer = BoardGameStateRenderer;
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var HandlebarsSVGAnimationActionCreateTileRenderer = (function (_super) {
                    __extends(HandlebarsSVGAnimationActionCreateTileRenderer, _super);
                    function HandlebarsSVGAnimationActionCreateTileRenderer(animationTemplate, tileTemplate, tileColor, params) {
                        _super.call(this, animationTemplate, "opacity", "0", "1", "", params);
                        this.tileTemplate = tileTemplate;
                        this.tileColor = tileColor;
                    }
                    HandlebarsSVGAnimationActionCreateTileRenderer.prototype.findOrCreateTarget = function (action, gameState, div) {
                        var boardGameState = gameState;
                        var actionCreate = action;
                        var board = boardGameState.board;
                        var tile = actionCreate.tile;
                        var id = tile.id;
                        var tileSVG = this.tileTemplate({ tile: tile, gameState: gameState, tileColor: this.tileColor });
                        var result = render.HandlebarsSVGAnimationActionRenderer.parseSVG(tileSVG, id)[0];
                        var boardTiles = document.getElementById(board.id + "-tiles");
                        boardTiles.appendChild(result);
                        return result;
                    };
                    return HandlebarsSVGAnimationActionCreateTileRenderer;
                })(render.HandlebarsSVGAnimationAttributeActionRenderer);
                _board.HandlebarsSVGAnimationActionCreateTileRenderer = HandlebarsSVGAnimationActionCreateTileRenderer;
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var HandlebarsSVGAnimationActionDropTileRenderer = (function (_super) {
                    __extends(HandlebarsSVGAnimationActionDropTileRenderer, _super);
                    function HandlebarsSVGAnimationActionDropTileRenderer(animationTemplate, tileTemplate, tileColor, soundEffect, params) {
                        _super.call(this, animationTemplate, params);
                        this.tileTemplate = tileTemplate;
                        this.tileColor = tileColor;
                        this.soundEffect = soundEffect;
                    }
                    HandlebarsSVGAnimationActionDropTileRenderer.prototype.setToFinalState = function (action, gameState, target) {
                        var boardGameState = gameState;
                        var actionDropTile = action;
                        var board = boardGameState.board;
                        var x = actionDropTile.column * board.tileWidth;
                        var y = actionDropTile.toRow * board.tileHeight;
                        target.setAttribute("transform", "translate(" + x + "," + y + ")");
                    };
                    HandlebarsSVGAnimationActionDropTileRenderer.prototype.onCompletion = function (animated) {
                        this.soundEffect.play();
                    };
                    HandlebarsSVGAnimationActionDropTileRenderer.prototype.findOrCreateTarget = function (action, gameState, div) {
                        var boardGameState = gameState;
                        var actionDrop = action;
                        var board = boardGameState.board;
                        var tile = actionDrop.tile;
                        var id = tile.id;
                        var result = document.getElementById(id);
                        if (!result) {
                            var tileSVG = this.tileTemplate({ tile: tile, gameState: gameState, tileColor: this.tileColor });
                            result = render.HandlebarsSVGAnimationActionRenderer.parseSVG(tileSVG, id)[0];
                            var boardTiles = document.getElementById(board.id + "-tiles");
                            var firstChild = boardTiles.firstChild;
                            if (firstChild) {
                                boardTiles.insertBefore(result, firstChild);
                            }
                            else {
                                boardTiles.appendChild(result);
                            }
                        }
                        return result;
                    };
                    return HandlebarsSVGAnimationActionDropTileRenderer;
                })(render.HandlebarsSVGAnimationActionRenderer);
                _board.HandlebarsSVGAnimationActionDropTileRenderer = HandlebarsSVGAnimationActionDropTileRenderer;
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var board;
            (function (_board) {
                var HandlebarsSVGAnimationActionSetTileSelectionStateRenderer = (function (_super) {
                    __extends(HandlebarsSVGAnimationActionSetTileSelectionStateRenderer, _super);
                    function HandlebarsSVGAnimationActionSetTileSelectionStateRenderer(animationTemplate, tileColor, validTileColor, invalidTileColor, extraneousTileColor, badParameterTileColor, idPostfix, params) {
                        _super.call(this, animationTemplate, params);
                        this.tileColor = tileColor;
                        this.validTileColor = validTileColor;
                        this.invalidTileColor = invalidTileColor;
                        this.extraneousTileColor = extraneousTileColor;
                        this.badParameterTileColor = badParameterTileColor;
                        this.idPostfix = idPostfix;
                    }
                    HandlebarsSVGAnimationActionSetTileSelectionStateRenderer.prototype.adjustParams = function (action, gameState, params) {
                        var actionSetTileSelectionState = action;
                        var startState = actionSetTileSelectionState.originalSelectionState;
                        var endState = actionSetTileSelectionState.newSelectionState;
                        var startColor = this.getColor(startState);
                        var endColor = this.getColor(endState);
                        params["from"] = startColor;
                        params["to"] = endColor;
                        params["attributeName"] = "fill";
                    };
                    HandlebarsSVGAnimationActionSetTileSelectionStateRenderer.prototype.getColor = function (state) {
                        var result;
                        if (state == 2 /* VALID */) {
                            result = this.validTileColor;
                        }
                        else if (state == 1 /* INVALID */) {
                            result = this.invalidTileColor;
                        }
                        else if (state == 3 /* EXTRANEOUS */) {
                            result = this.extraneousTileColor;
                        }
                        else if (state == 4 /* BAD_PARAMETER */) {
                            result = this.badParameterTileColor;
                        }
                        else {
                            result = this.tileColor;
                        }
                        return result;
                    };
                    HandlebarsSVGAnimationActionSetTileSelectionStateRenderer.prototype.setToFinalState = function (action, gameState, target) {
                        var actionSetTileSelectionState = action;
                        var color = this.getColor(actionSetTileSelectionState.newSelectionState);
                        target.setAttribute("fill", color);
                    };
                    HandlebarsSVGAnimationActionSetTileSelectionStateRenderer.prototype.findOrCreateTarget = function (action, gameState, div) {
                        var boardGameState = gameState;
                        var board = boardGameState.board;
                        var id = action.getPrimaryId() + this.idPostfix;
                        var result = document.getElementById(id);
                        return result;
                    };
                    return HandlebarsSVGAnimationActionSetTileSelectionStateRenderer;
                })(render.HandlebarsSVGAnimationActionRenderer);
                _board.HandlebarsSVGAnimationActionSetTileSelectionStateRenderer = HandlebarsSVGAnimationActionSetTileSelectionStateRenderer;
            })(board = render.board || (render.board = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var home;
            (function (home) {
                var HomeGameStateActionSource = (function () {
                    function HomeGameStateActionSource(gameState, div) {
                        this.gameState = gameState;
                        this.div = div;
                    }
                    HomeGameStateActionSource.prototype.start = function (actionHandler) {
                        var _this = this;
                        for (var i in this.gameState.levels) {
                            var f = function () {
                                var level = _this.gameState.levels[i];
                                var levelElement = document.getElementById(level.id);
                                levelElement.onclick = function () {
                                    var actions = [new ct.core.home.action.ActionLevelSelect(level)];
                                    actionHandler(actions);
                                };
                            };
                            f();
                        }
                    };
                    HomeGameStateActionSource.prototype.stop = function () {
                    };
                    return HomeGameStateActionSource;
                })();
                home.HomeGameStateActionSource = HomeGameStateActionSource;
            })(home = render.home || (render.home = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
var ct;
(function (ct) {
    var core;
    (function (core) {
        var render;
        (function (render) {
            var home;
            (function (home) {
                var HomeGameStateRenderer = (function (_super) {
                    __extends(HomeGameStateRenderer, _super);
                    function HomeGameStateRenderer(template, params, baseUrl, windowWidth, windowHeight) {
                        _super.call(this, template, params, baseUrl);
                        this.windowWidth = windowWidth;
                        this.windowHeight = windowHeight;
                    }
                    HomeGameStateRenderer.prototype.render = function (gameState, div) {
                        _super.prototype.render.call(this, gameState, div);
                        var homeGameState = gameState;
                        return new home.HomeGameStateActionSource(homeGameState, div);
                    };
                    HomeGameStateRenderer.prototype.doRender = function (gameState, div, parameters) {
                        var homeGameState = gameState;
                        var cols = Math.max(2, Math.floor(this.windowWidth / 300));
                        var selectionWidth = this.windowWidth / (cols + 1);
                        var margin = (this.windowWidth - selectionWidth * cols) / (cols + 1);
                        var selectionHeight = Math.min(selectionWidth, (this.windowHeight - margin) / (Math.ceil(homeGameState.levels.length / cols) * 2));
                        for (var i in homeGameState.levels) {
                            var row = Math.floor(i / cols);
                            var col = i % cols;
                            var x = margin * (col + 1) + col * selectionWidth;
                            var y = margin * (row + 1) + row * selectionHeight;
                            var level = homeGameState.levels[i];
                            level.position.x = x;
                            level.position.y = y;
                        }
                        parameters["windowWidth"] = this.windowWidth;
                        parameters["windowHeight"] = this.windowHeight;
                        parameters["selectionWidth"] = selectionWidth;
                        parameters["selectionHeight"] = selectionHeight;
                        parameters["selectionWidthDiv2"] = selectionWidth / 2;
                        parameters["selectionHeightDiv2"] = selectionHeight / 2;
                        parameters["fontSize"] = selectionWidth / 10;
                        _super.prototype.doRender.call(this, gameState, div, parameters);
                    };
                    return HomeGameStateRenderer;
                })(render.HandlebarsGameStateRenderer);
                home.HomeGameStateRenderer = HomeGameStateRenderer;
            })(home = render.home || (render.home = {}));
        })(render = core.render || (core.render = {}));
    })(core = ct.core || (ct.core = {}));
})(ct || (ct = {}));
//# sourceMappingURL=out.js.map